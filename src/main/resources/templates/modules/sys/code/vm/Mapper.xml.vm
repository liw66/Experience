<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.li.experience.modules.app.dao.${className}Dao">

    <sql id="base_column_list">
        #foreach($c in $columns) `$c.columnName`#if($foreach.hasNext),#end#end
	</sql>

    <sql id="base_where_list">
    #foreach ($c in $columns)
    <if test="$c.columnName != null and $c.columnName != ''">and $c.columnName = #{$c.columnName}</if>
#end
    </sql>

    <select id="get" resultType="com.li.experience.modules.app.domain.${className}DO">
        select
        <include refid="base_column_list"></include>
        from ${tableName} where ${pk} = #{value}
    </select>

    <select id="list" resultType="com.li.experience.modules.app.domain.${className}DO">
        select
        <include refid="base_column_list"></include>
        from ${tableName}
        <where>
            <include refid="base_where_list"></include>
        </where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
            <otherwise>
                order by createdat desc
            </otherwise>
        </choose>
    </select>

    <select id="count" resultType="int">
        select count(*) from ${tableName}
        <where>
            <include refid="base_where_list"></include>
        </where>
    </select>

    <insert id="save" parameterType="com.li.experience.modules.app.domain.${className}DO" useGeneratedKeys="true"
            keyProperty="${pk}">
		insert into ${tableName}
		(#foreach($c in $columns)#if($c.columnName != $pk)`$c.columnName`#if($foreach.hasNext),#end#end#end)
		values
		(#foreach($c in $columns)#if($c.columnName != $pk)#{$c.columnName}#if($foreach.hasNext),#end#end#end)
	</insert>

    <update id="update" parameterType="com.li.experience.modules.app.domain.${className}DO">
        update ${tableName}
        <set>
    #foreach ($c in $columns)
    #if($c.columnName != $pk)
    <if test="$c.columnName != null">`$c.columnName` = #{$c.columnName}#if($foreach.hasNext),#end</if>
    #end
#end
        </set>
        where ${pk} = #{${pk}}
    </update>

    <delete id="remove">
		delete from ${tableName} where ${pk} = #{value}
	</delete>

    <delete id="batchRemove">
        delete from ${tableName} where ${pk} in
        <foreach item="${pk}" collection="array" open="(" separator="," close=")">
            #{${pk}}
        </foreach>
    </delete>

</mapper>